package com.silibrina.tecnova.commons.modules;

import com.silibrina.tecnova.commons.annotations.Route;
import play.mvc.Http.Request;
import play.mvc.Result;

import java.util.Locale;
import java.util.Map;

/**
 * This is the class to define a module containing routes.
 * A class extending this module will have his methods annotated with
 * {@link Route} loaded as routes. It will also provide support
 * objects when the route method is dealing with the request.
 *
 * The following will be available during request:
 *
 * - path: the relative path for this request
 * - request: the {@link Request} object from play framework
 * - parameters: parameters extracted from the path matching the given pattern.
 *
 * Methods with a {@link Route} annotation must resturn a {@link Result}.
 */
public abstract class OpenDataModule {

    private String path;
    private Request request;
    private Map<String, String> parameters;

    /**
     * The extracted parameters for this request.
     * The parameters will be extracted from the path considering the
     * provided pattern for the current matching method route.
     *
     * @return a map with id provided in pattern with
     * the extracted value from the given path.
     * E.g:
     * &lt;'id', '23'&gt;
     */
    public Map<String, String> getParameters() {
        return parameters;
    }

    /**
     * The {@link Request} object play framework provided when dealing with a request.
     * You can know more about it by accessing its documentation:
     * https://www.playframework.com/documentation/2.5.3/api/java/index.html
     *
     * @return The request object generated by play framework.
     */
    public Request getRequest() {
        return request;
    }

    /**
     * The relative path for the current request
     *
     * @return relative path.
     */
    public String getPath() {
        return path;
    }

    /**
     * Internally used to set the path before handling the request.
     *
     * @param path the relative path.
     */
    public void setPath(String path) {
        this.path = path;
    }

    /**
     * Internally used to set the request before handling the request.
     *
     * @param request the request object for the current request.
     */
    public void setRequest(Request request) {
        this.request = request;
    }

    /**
     * Internally used to set the parameters before handling the request.
     *
     * @param parameters the extracted parameters applying the patter to the given relative path.
     */
    public void setParameters(Map<String, String> parameters) {
        this.parameters = parameters;
    }

    @Override
    public String toString() {
        return String.format(Locale.getDefault(),
                "%s [path: %s, parameters: %s, request: %s]",
                this.getClass().getSimpleName(), path, parameters, request);
    }
}